generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ENTRANT
  ADMIN
}

enum TokenType {
  OTP
  SESSION
}

enum DocumentState {
  PENDING
  APPROVED
}

enum EducationProgram {
  CSSE
  ISSE
  IIS
  ISRS
  IMST
}

enum EducationalDegree {
  BACHELOR
  MASTER
  PHD
}

enum EducationalProgramType {
  PROFESSIONAL
  SCIENTIFIC
}

enum StudyForm {
  FULL_TIME
  PART_TIME
}

enum FundingSource {
  BUDGET
  CONTRACT
}

enum PaymentType {
  MONTHLY
  QUARTERLY
  SEMESTERLY
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  firstName            String              @map("first_name")
  middleName           String?             @map("middle_name")
  lastName             String              @map("last_name")
  role                 Role                @default(ENTRANT)
  benefit              Boolean             @default(false)
  competitivePoint     Float?              @map("competitive_point")
  telegramId           BigInt              @default(0) @map("telegram_id")
  expectedSpecialities String              @default("") @map("expected_specialities")
  isDorm               Boolean             @default(false) @map("is_dorm")
  printedEdbo          Boolean             @default(false) @map("printed_edbo")
  confirmedStudyPlace  Boolean             @default(false) @map("confirmed_study_place")
  phone                String              @default("")
  username             String              @default("")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at")
  contracts            Contract[]
  entrantData          EntrantData?
  representativeData   RepresentativeData?
  customerData         CustomerData?
  queuePositons        QueuePosition[]
  tokens               Token[]

  @@map("users")
}

model Token {
  value     String    @unique
  type      TokenType
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tokens")
}

model EntrantData {
  userId            String   @unique @map("user_id")
  passportSeries    String   @map("passport_series")
  passportNumber    String   @map("passport_number")
  passportInstitute String   @map("passport_institute")
  passportDate      String   @map("passport_date")
  phoneNumber       String   @map("phone_number")
  idCode            String?  @map("id_code")
  email             String
  region            String
  settlement        String
  address           String
  index             String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("entrant_data")
}

model RepresentativeData {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  firstName         String   @map("first_name")
  middleName        String?  @map("middle_name")
  lastName          String   @map("last_name")
  email             String
  passportSeries    String   @map("passport_series")
  passportNumber    String   @map("passport_number")
  passportInstitute String   @map("passport_institute")
  passportDate      String   @map("passport_date")
  phoneNumber       String   @map("phone_number")
  idCode            String?  @map("id_code")
  region            String
  settlement        String
  address           String
  index             String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("representative_data")
}

model CustomerData {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  firstName         String   @map("first_name")
  middleName        String?  @map("middle_name")
  lastName          String   @map("last_name")
  email             String
  passportSeries    String   @map("passport_series")
  passportNumber    String   @map("passport_number")
  passportInstitute String   @map("passport_institute")
  passportDate      String   @map("passport_date")
  phoneNumber       String   @map("phone_number")
  idCode            String?  @map("id_code")
  region            String
  settlement        String
  address           String
  index             String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("customer_data")
}

model Contract {
  id                 String                  @id @default(uuid())
  state              DocumentState           @default(PENDING)
  number             String?
  date               String?
  degree             EducationalDegree       @default(BACHELOR) @map("educational_degree")
  educationalProgram String?                 @map("educational_program")
  programType        EducationalProgramType? @default(PROFESSIONAL) @map("program_type")
  paymentType        PaymentType?            @map("payment_type")
  specialty          String
  studyForm          StudyForm               @default(FULL_TIME) @map("study_form")
  fundingSource      FundingSource           @map("funding_source")
  priorityState      DocumentState?          @map("priority_state")
  priorityDate       String?                 @map("priority_date")
  userId             String                  @map("user_id")
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  priorities Priority[]

  @@map("contracts")
}

model Priority {
  contractId String           @map("contract_id")
  number     Int
  program    EducationProgram
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @default(now()) @updatedAt @map("updated_at")

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([contractId, number])
  @@map("priorities")
}

enum QueuePositionStatus {
  WAITING
  PROCESSING
}

model QueuePosition {
  id                   Int                 @id @default(autoincrement())
  userId               String              @map("user_id")
  code                 Int
  position             Int
  status               QueuePositionStatus @default(WAITING)
  lastNotifiedPosition Int                 @default(0) @map("last_notified_position")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("queue_positions")
}
